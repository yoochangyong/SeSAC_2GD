@import "reset";
@import "mixin";

$boxShadow: 2px 2px 6px gray;
$blue_btn: aqua;

.div1 {
  width: 100%;
  height: 50vh;
  background-color: violet;
  .div2 {
    width: 80%;
    height: 50%;
    background-color: orange;
    box-shadow: $boxShadow;
    .div3 {
      width: 80%;
      height: 50%;
      box-shadow: $boxShadow;
      background-color: green;
    }
  }
  .btn {
    width: 180px;
    height: 70px;
    border-radius: 15px;
    box-shadow: $boxShadow;
    line-height: 70px;
    color: white;
    text-align: center;
    font-size: 23px;
    letter-spacing: 3px;

    &.orangered {
      background-color: orangered;
    }

    &--opacity {
      background-color: $blue_btn;
      opacity: 0.5;
    }

    &--blue {
      background-color: $blue_btn;
    }

    &:hover {
      background-color: black;
      font-weight: 700;
    }
  }
}

.container {
  .box1 {
    @include square1;
    background-color: #2323cb;

    // &:nth-child(1) {
    //   background-color: red;
    //   width: 100px;
    // }
    // &:nth-child(2) {
    //   background-color: orange;
    //   width: 120px;
    // }
    // &:nth-child(3) {
    //   background-color: yellow;
    //   width: 140px;
    // }

    @for $i from 1 to 4 {
      &:nth-child(#{$i}) {
        width: (80px + 20px * $i);
      }
    }
  }
  .circle {
    // circle mixin에는 default 값이 설정이 안되어있어서 전달 안하면 오류님
    // include circle(); > x

    @include circle($circleColor: yellowgreen, $circleOpacity: 0.5);
    // include circle(yellowgreen,0.5)

    $circleBgColors: ((blue, dodgerblue, aqua));
    @each $el in $circleBgColors {
      // index(array, array's value) :  array의 value에 대한 index 반환
      $index: index($circleBgColors, $el);
      &:nth-of-type(#{$index}) {
        @include circle($circleColor: $el, $circleOpacity: 1 - 0.2 * $index);
      }
    }
  }
  .box2 {
    // include square2() > default가 있어서 오류 안남
    // @include square2(
    //   $squareBgColor: yellow,
    //   $squareFontSize: 20px,
    //   $SquareFontColor: blue
    // );
    @include square2(black, 16px, white);
    &:nth-of-type(4) {
      @include square2(yellow, 20px, navy);
    }
    &:nth-of-type(5) {
      @include square2(orangered, 30px, black);
    }
  }
}

.img-test {
  width: 100px;
  height: 100px;
  border: 1px solid blue;
  &.src-img {
    background-image: url("../img/img1.png");
  }
  &.public-img {
    background-image: url("/img/img1.png");
  }
}

.practice {
  display: flex;
  justify-content: space-around;
  margin-bottom: 20%;
  div {
    width: 200px;
    height: 300px;
    background-color: skyblue;
    border-radius: 10%;
    box-shadow: $boxShadow;
    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;

    @for $i from 1 through 4 {
      &:nth-child(#{$i + 1}) {
        background-image: url("../img/img#{$i}.png");
      }
    }
    // nogada: me
    // &:nth-child(2) {
    //   background-image: url("../img/img1.png");
    // }
    // &:nth-child(3) {
    //   background-image: url("../img/img2.png");
    // }
    // &:nth-child(4) {
    //   background-image: url("../img/img3.png");
    // }
    // &:nth-child(5) {
    //   background-image: url("../img/img4.png");
    // }
  }
  h1 {
    text-align: center;
  }
}
